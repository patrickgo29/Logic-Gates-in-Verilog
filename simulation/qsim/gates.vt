// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/08/2014 19:19:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gates
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gates_vlg_sample_tst(
	a,
	b,
	sampler_tx
);
input  a;
input  b;
output sampler_tx;

reg sample;
time current_time;
always @(a or b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gates_vlg_check_tst (
	AND,
	NAND,
	NOR,
	OR,
	XNOR,
	XOR,
	sampler_rx
);
input  AND;
input  NAND;
input  NOR;
input  OR;
input  XNOR;
input  XOR;
input sampler_rx;

reg  AND_expected;
reg  NAND_expected;
reg  NOR_expected;
reg  OR_expected;
reg  XNOR_expected;
reg  XOR_expected;

reg  AND_prev;
reg  NAND_prev;
reg  NOR_prev;
reg  OR_prev;
reg  XNOR_prev;
reg  XOR_prev;

reg  AND_expected_prev;
reg  NAND_expected_prev;
reg  NOR_expected_prev;
reg  OR_expected_prev;
reg  XNOR_expected_prev;
reg  XOR_expected_prev;

reg  last_AND_exp;
reg  last_NAND_exp;
reg  last_NOR_exp;
reg  last_OR_exp;
reg  last_XNOR_exp;
reg  last_XOR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	AND_prev = AND;
	NAND_prev = NAND;
	NOR_prev = NOR;
	OR_prev = OR;
	XNOR_prev = XNOR;
	XOR_prev = XOR;
end

// update expected /o prevs

always @(trigger)
begin
	AND_expected_prev = AND_expected;
	NAND_expected_prev = NAND_expected;
	NOR_expected_prev = NOR_expected;
	OR_expected_prev = OR_expected;
	XNOR_expected_prev = XNOR_expected;
	XOR_expected_prev = XOR_expected;
end



// expected AND
initial
begin
	AND_expected = 1'bX;
end 

// expected NAND
initial
begin
	NAND_expected = 1'bX;
end 

// expected NOR
initial
begin
	NOR_expected = 1'bX;
end 

// expected OR
initial
begin
	OR_expected = 1'bX;
end 

// expected XNOR
initial
begin
	XNOR_expected = 1'bX;
	XNOR_expected = #180000 1'b1;
	XNOR_expected = #90000 1'bX;
end 

// expected XOR
initial
begin
	XOR_expected = 1'bX;
	XOR_expected = #180000 1'b1;
	XOR_expected = #90000 1'bX;
end 
// generate trigger
always @(AND_expected or AND or NAND_expected or NAND or NOR_expected or NOR or OR_expected or OR or XNOR_expected or XNOR or XOR_expected or XOR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AND = %b | expected NAND = %b | expected NOR = %b | expected OR = %b | expected XNOR = %b | expected XOR = %b | ",AND_expected_prev,NAND_expected_prev,NOR_expected_prev,OR_expected_prev,XNOR_expected_prev,XOR_expected_prev);
	$display("| real AND = %b | real NAND = %b | real NOR = %b | real OR = %b | real XNOR = %b | real XOR = %b | ",AND_prev,NAND_prev,NOR_prev,OR_prev,XNOR_prev,XOR_prev);
`endif
	if (
		( AND_expected_prev !== 1'bx ) && ( AND_prev !== AND_expected_prev )
		&& ((AND_expected_prev !== last_AND_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AND_expected_prev);
		$display ("     Real value = %b", AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AND_exp = AND_expected_prev;
	end
	if (
		( NAND_expected_prev !== 1'bx ) && ( NAND_prev !== NAND_expected_prev )
		&& ((NAND_expected_prev !== last_NAND_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NAND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NAND_expected_prev);
		$display ("     Real value = %b", NAND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_NAND_exp = NAND_expected_prev;
	end
	if (
		( NOR_expected_prev !== 1'bx ) && ( NOR_prev !== NOR_expected_prev )
		&& ((NOR_expected_prev !== last_NOR_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOR_expected_prev);
		$display ("     Real value = %b", NOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NOR_exp = NOR_expected_prev;
	end
	if (
		( OR_expected_prev !== 1'bx ) && ( OR_prev !== OR_expected_prev )
		&& ((OR_expected_prev !== last_OR_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OR_expected_prev);
		$display ("     Real value = %b", OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OR_exp = OR_expected_prev;
	end
	if (
		( XNOR_expected_prev !== 1'bx ) && ( XNOR_prev !== XNOR_expected_prev )
		&& ((XNOR_expected_prev !== last_XNOR_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XNOR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XNOR_expected_prev);
		$display ("     Real value = %b", XNOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_XNOR_exp = XNOR_expected_prev;
	end
	if (
		( XOR_expected_prev !== 1'bx ) && ( XOR_prev !== XOR_expected_prev )
		&& ((XOR_expected_prev !== last_XOR_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XOR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XOR_expected_prev);
		$display ("     Real value = %b", XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_XOR_exp = XOR_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gates_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
// wires                                               
wire AND;
wire NAND;
wire NOR;
wire OR;
wire XNOR;
wire XOR;

wire sampler;                             

// assign statements (if any)                          
gates i1 (
// port map - connection between master ports and signals/registers   
	.\AND (AND),
	.\NAND (NAND),
	.\NOR (NOR),
	.\OR (OR),
	.\XNOR (XNOR),
	.\XOR (XOR),
	.a(a),
	.b(b)
);

// a
initial
begin
	a = 1'b0;
	a = #160000 1'b1;
	a = #160000 1'b0;
end 

// b
initial
begin
	b = 1'b0;
	b = #80000 1'b1;
	b = #80000 1'b0;
	b = #80000 1'b1;
	b = #80000 1'b0;
end 

gates_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sampler_tx(sampler)
);

gates_vlg_check_tst tb_out(
	.AND(AND),
	.NAND(NAND),
	.NOR(NOR),
	.OR(OR),
	.XNOR(XNOR),
	.XOR(XOR),
	.sampler_rx(sampler)
);
endmodule

