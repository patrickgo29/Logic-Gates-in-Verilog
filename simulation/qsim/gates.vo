// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 32-bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "12/08/2014 19:19:41"

// 
// Device: Altera EP4CGX15BF14C6 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module gates (
	a,
	b,
	\AND ,
	\NAND ,
	\OR ,
	\NOR ,
	\XNOR ,
	\XOR );
input 	a;
input 	b;
output 	\AND ;
output 	\NAND ;
output 	\OR ;
output 	\NOR ;
output 	\XNOR ;
output 	\XOR ;

// Design Ports Information
// AND	=>  Location: PIN_M13,	 I/O Standard: 2.5 V,	 Current Strength: Default
// NAND	=>  Location: PIN_K13,	 I/O Standard: 2.5 V,	 Current Strength: Default
// OR	=>  Location: PIN_N8,	 I/O Standard: 2.5 V,	 Current Strength: Default
// NOR	=>  Location: PIN_M6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// XNOR	=>  Location: PIN_N4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// XOR	=>  Location: PIN_M4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// a	=>  Location: PIN_L7,	 I/O Standard: 2.5 V,	 Current Strength: Default
// b	=>  Location: PIN_L5,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \AND~output_o ;
wire \NAND~output_o ;
wire \OR~output_o ;
wire \NOR~output_o ;
wire \XNOR~output_o ;
wire \XOR~output_o ;
wire \a~input_o ;
wire \b~input_o ;
wire \comb~0_combout ;
wire \comb~1_combout ;
wire \comb~2_combout ;


// Location: IOOBUF_X33_Y10_N2
cycloneiv_io_obuf \AND~output (
	.i(\comb~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\AND~output_o ),
	.obar());
// synopsys translate_off
defparam \AND~output .bus_hold = "false";
defparam \AND~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X33_Y15_N2
cycloneiv_io_obuf \NAND~output (
	.i(!\comb~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\NAND~output_o ),
	.obar());
// synopsys translate_off
defparam \NAND~output .bus_hold = "false";
defparam \NAND~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X20_Y0_N9
cycloneiv_io_obuf \OR~output (
	.i(\comb~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\OR~output_o ),
	.obar());
// synopsys translate_off
defparam \OR~output .bus_hold = "false";
defparam \OR~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X12_Y0_N9
cycloneiv_io_obuf \NOR~output (
	.i(!\comb~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\NOR~output_o ),
	.obar());
// synopsys translate_off
defparam \NOR~output .bus_hold = "false";
defparam \NOR~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X10_Y0_N9
cycloneiv_io_obuf \XNOR~output (
	.i(!\comb~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\XNOR~output_o ),
	.obar());
// synopsys translate_off
defparam \XNOR~output .bus_hold = "false";
defparam \XNOR~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X8_Y0_N2
cycloneiv_io_obuf \XOR~output (
	.i(\comb~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\XOR~output_o ),
	.obar());
// synopsys translate_off
defparam \XOR~output .bus_hold = "false";
defparam \XOR~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X14_Y0_N1
cycloneiv_io_ibuf \a~input (
	.i(a),
	.ibar(gnd),
	.o(\a~input_o ));
// synopsys translate_off
defparam \a~input .bus_hold = "false";
defparam \a~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X14_Y0_N8
cycloneiv_io_ibuf \b~input (
	.i(b),
	.ibar(gnd),
	.o(\b~input_o ));
// synopsys translate_off
defparam \b~input .bus_hold = "false";
defparam \b~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X14_Y1_N8
cycloneiv_lcell_comb \comb~0 (
// Equation(s):
// \comb~0_combout  = (\a~input_o  & \b~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\a~input_o ),
	.datad(\b~input_o ),
	.cin(gnd),
	.combout(\comb~0_combout ),
	.cout());
// synopsys translate_off
defparam \comb~0 .lut_mask = 16'hF000;
defparam \comb~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X14_Y1_N10
cycloneiv_lcell_comb \comb~1 (
// Equation(s):
// \comb~1_combout  = (\a~input_o ) # (\b~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\a~input_o ),
	.datad(\b~input_o ),
	.cin(gnd),
	.combout(\comb~1_combout ),
	.cout());
// synopsys translate_off
defparam \comb~1 .lut_mask = 16'hFFF0;
defparam \comb~1 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X14_Y1_N4
cycloneiv_lcell_comb \comb~2 (
// Equation(s):
// \comb~2_combout  = \a~input_o  $ (\b~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\a~input_o ),
	.datad(\b~input_o ),
	.cin(gnd),
	.combout(\comb~2_combout ),
	.cout());
// synopsys translate_off
defparam \comb~2 .lut_mask = 16'h0FF0;
defparam \comb~2 .sum_lutc_input = "datac";
// synopsys translate_on

assign \AND  = \AND~output_o ;

assign \NAND  = \NAND~output_o ;

assign \OR  = \OR~output_o ;

assign \NOR  = \NOR~output_o ;

assign \XNOR  = \XNOR~output_o ;

assign \XOR  = \XOR~output_o ;

endmodule
